<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tabbed CSV Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <div class="card">
            <div class="card-header">
                <ul class="nav nav-tabs card-header-tabs" id="csvTabs" role="tablist">
                    <li class="nav-item">
                        <button class="nav-link active" id="existing-tab" data-bs-toggle="tab" data-bs-target="#existing" type="button" role="tab" aria-controls="existing" aria-selected="true">
                            Existing File Upload
                        </button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link" id="dynamic-tab" data-bs-toggle="tab" data-bs-target="#dynamic" type="button" role="tab" aria-controls="dynamic" aria-selected="false">
                            Dynamic Table with CSV
                        </button>
                    </li>
                </ul>
            </div>
            <div class="card-body">
                <div class="tab-content" id="csvTabsContent">
                    <!-- Existing File Upload Tab -->
                    <div class="tab-pane fade show active" id="existing" role="tabpanel" aria-labelledby="existing-tab">
                        <h5>Existing File Upload</h5>
                        <form>
                            <div class="mb-3">
                                <label for="existingFile" class="form-label">Upload an existing CSV file</label>
                                <input type="file" id="existingFile" class="form-control" accept=".csv">
                            </div>
                            <textarea id="existingFileContent" class="form-control" rows="5" readonly placeholder="Uploaded file content will appear here"></textarea>
                        </form>
                    </div>

                    <!-- Dynamic Table with CSV Tab -->
                    <div class="tab-pane fade" id="dynamic" role="tabpanel" aria-labelledby="dynamic-tab">
                        <h5>Dynamic Table with CSV</h5>
                        <!-- Table Section -->
                        <form id="dataForm">
                            <table class="table table-bordered" id="dataTable">
                                <thead>
                                    <tr>
                                        <th>Column 1</th>
                                        <th>Column 2</th>
                                        <th>Column 3</th>
                                        <th>Column 4</th>
                                        <th>Column 5</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td><input type="text" class="form-control" name="col1"></td>
                                        <td><input type="text" class="form-control" name="col2"></td>
                                        <td><input type="text" class="form-control" name="col3"></td>
                                        <td><input type="text" class="form-control" name="col4"></td>
                                        <td><input type="text" class="form-control" name="col5"></td>
                                    </tr>
                                </tbody>
                            </table>
                            <button type="button" class="btn btn-primary mb-3" id="addRow">Add Row</button>
                            <button type="button" class="btn btn-success mb-3" id="generateCSV">Generate CSV</button>
                        </form>

                        <!-- Upload Section -->
                        <div class="mt-4">
                            <h6>Upload and Display CSV</h6>
                            <input type="file" id="uploadCSV" class="form-control mb-3" accept=".csv">
                            <textarea id="csvContent" class="form-control mb-3" rows="5" readonly placeholder="Uploaded CSV content will appear here"></textarea>
                            <h6>Rendered Data:</h6>
                            <table class="table table-bordered" id="uploadedTable">
                                <thead>
                                    <tr>
                                        <th>Column 1</th>
                                        <th>Column 2</th>
                                        <th>Column 3</th>
                                        <th>Column 4</th>
                                        <th>Column 5</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const dataTable = document.querySelector("#dataTable tbody");
        const uploadedTable = document.querySelector("#uploadedTable tbody");
        const uploadInput = document.getElementById("uploadCSV");
        const existingFileInput = document.getElementById("existingFile");
        const existingFileContent = document.getElementById("existingFileContent");

        // Existing File Upload
        existingFileInput.addEventListener("change", (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    existingFileContent.value = e.target.result;
                };
                reader.readAsText(file);
            }
        });

        // Add new row
        document.getElementById("addRow").addEventListener("click", () => {
            const newRow = `
                <tr>
                    <td><input type="text" class="form-control" name="col1"></td>
                    <td><input type="text" class="form-control" name="col2"></td>
                    <td><input type="text" class="form-control" name="col3"></td>
                    <td><input type="text" class="form-control" name="col4"></td>
                    <td><input type="text" class="form-control" name="col5"></td>
                </tr>`;
            dataTable.insertAdjacentHTML("beforeend", newRow);
        });

        // Generate CSV and populate file input
        document.getElementById("generateCSV").addEventListener("click", () => {
            const rows = Array.from(dataTable.querySelectorAll("tr"));
            const csvContent = rows.map(row => {
                const inputs = row.querySelectorAll("input");
                return Array.from(inputs).map(input => input.value).join(",");
            }).join("\n");

            // Generate Blob and populate file input
            const blob = new Blob([csvContent], { type: "text/csv" });
            const file = new File([blob], "data.csv", { type: "text/csv" });
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            uploadInput.files = dataTransfer.files;

            // Automatically render uploaded content
            renderUploadedCSV(blob);
        });

        // Render uploaded CSV
        uploadInput.addEventListener("change", (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const content = e.target.result;
                    document.getElementById("csvContent").value = content;

                    // Render CSV in table
                    const rows = content.split("\n").filter(row => row.trim());
                    uploadedTable.innerHTML = rows.map(row => {
                        const cols = row.split(",");
                        return `<tr>${cols.map(col => `<td>${col.trim()}</td>`).join("")}</tr>`;
                    }).join("");
                };
                reader.readAsText(file);
            }
        });

        // Helper: Render CSV directly from Blob
        function renderUploadedCSV(blob) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const content = e.target.result;
                document.getElementById("csvContent").value = content;

                // Render CSV in table
                const rows = content.split("\n").filter(row => row.trim());
                uploadedTable.innerHTML = rows.map(row => {
                    const cols = row.split(",");
                    return `<tr>${cols.map(col => `<td>${col.trim()}</td>`).join("")}</tr>`;
                }).join("");
            };
            reader.readAsText(blob);
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
